{
    "summary": {
        "total": 90,
        "passed": 90,
        "failed": 0,
        "skipped": 0,
        "last_run": "2025-05-24 14:15",
        "duration": 0
    },
    "categories": {
        "auth": {
            "name": "Kimlik Doğrulama Testleri",
            "icon": "lock",
            "total": 14,
            "passed": 14,
            "failed": 0,
            "skipped": 0,
            "tests": [
                {
                    "name": "test_register_success",
                    "file": "integration\\test_auth_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_register_success(client: TestClient):\n    \"\"\"\n    Başarılı bir kullanıcı kaydını test eder\n    \"\"\"\n    user_data = {\n        \"email\": \"newuser@example.com\",\n        \"password\": \"Test1234!\",\n        \"full_name\": \"New Test User\",\n        \"date_of_birth\": \"2000-01-01\"\n    }\n    \n    response = client.post(\"/api/v1/auth/register\", json=user_data)\n    \n    assert response.status_code == status.HTTP_201_CREATED\n    data = response.json()\n    assert data[\"email\"] == user_data[\"email\"]\n    assert data[\"full_name\"] == user_data[\"full_name\"]\n    assert \"id\" in data\n    assert \"password\" not in data  # Şifre yanıtta olmamalı\n",
                    "error": null,
                    "type": "other",
                    "description": "Başarılı bir kullanıcı kaydını test eder"
                },
                {
                    "name": "test_register_duplicate_email",
                    "file": "integration\\test_auth_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_register_duplicate_email(client: TestClient, test_user):\n    \"\"\"\n    Var olan bir e-posta ile kayıt olmayı dener ve hatayı doğrular\n    \"\"\"\n    user_data = {\n        \"email\": test_user.email,  # Zaten kayıtlı olan e-posta\n        \"password\": \"AnotherPassword123!\",\n        \"full_name\": \"Duplicate Email User\",\n        \"date_of_birth\": \"2000-01-01\"\n    }\n    \n    response = client.post(\"/api/v1/auth/register\", json=user_data)\n    \n    assert response.status_code == status.HTTP_400_BAD_REQUEST\n    assert \"detail\" in response.json()\n",
                    "error": null,
                    "type": "other",
                    "description": "Var olan bir e-posta ile kayıt olmayı dener ve hatayı doğrular"
                },
                {
                    "name": "test_login_success",
                    "file": "integration\\test_auth_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_login_success(client: TestClient, test_user):\n    \"\"\"\n    Başarılı bir giriş işlemini test eder\n    \"\"\"\n    login_data = {\n        \"username\": test_user.email,\n        \"password\": \"Test1234!\"\n    }\n    \n    response = client.post(\"/api/v1/auth/login\", data=login_data)\n    \n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert \"access_token\" in data\n    assert data[\"token_type\"] == \"bearer\"\n",
                    "error": null,
                    "type": "other",
                    "description": "Başarılı bir giriş işlemini test eder"
                },
                {
                    "name": "test_login_wrong_password",
                    "file": "integration\\test_auth_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_login_wrong_password(client: TestClient, test_user):\n    \"\"\"\n    Yanlış şifreyle giriş yapmayı dener ve hatayı doğrular\n    \"\"\"\n    login_data = {\n        \"username\": test_user.email,\n        \"password\": \"WrongPassword123!\"\n    }\n    \n    response = client.post(\"/api/v1/auth/login\", data=login_data)\n    \n    assert response.status_code == status.HTTP_401_UNAUTHORIZED\n    assert \"detail\" in response.json()\n",
                    "error": null,
                    "type": "other",
                    "description": "Yanlış şifreyle giriş yapmayı dener ve hatayı doğrular"
                },
                {
                    "name": "test_login_nonexistent_user",
                    "file": "integration\\test_auth_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_login_nonexistent_user(client: TestClient):\n    \"\"\"\n    Var olmayan bir kullanıcıyla giriş yapmayı dener\n    \"\"\"\n    login_data = {\n        \"username\": \"nonexistent@example.com\",\n        \"password\": \"SomePassword123!\"\n    }\n    \n    response = client.post(\"/api/v1/auth/login\", data=login_data)\n    \n    assert response.status_code == status.HTTP_401_UNAUTHORIZED\n    assert \"detail\" in response.json()\n",
                    "error": null,
                    "type": "other",
                    "description": "Var olmayan bir kullanıcıyla giriş yapmayı dener"
                },
                {
                    "name": "test_me_endpoint",
                    "file": "integration\\test_auth_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_me_endpoint(client: TestClient, auth_headers):\n    \"\"\"\n    /me endpoint'ini test eder\n    \"\"\"\n    response = client.get(\"/api/v1/auth/me\", headers=auth_headers)\n    \n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert \"id\" in data\n    assert \"email\" in data\n    assert \"full_name\" in data\n",
                    "error": null,
                    "type": "other",
                    "description": "/me endpoint'ini test eder"
                },
                {
                    "name": "test_me_unauthorized",
                    "file": "integration\\test_auth_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_me_unauthorized(client: TestClient):\n    \"\"\"\n    Token olmadan /me endpoint'ine erişmeyi dener\n    \"\"\"\n    response = client.get(\"/api/v1/auth/me\")\n    \n    assert response.status_code == status.HTTP_401_UNAUTHORIZED\n",
                    "error": null,
                    "type": "other",
                    "description": "Token olmadan /me endpoint'ine erişmeyi dener"
                },
                {
                    "name": "test_update_me",
                    "file": "integration\\test_auth_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_update_me(client: TestClient, auth_headers):\n    \"\"\"\n    Kullanıcı bilgilerini güncellemeyi test eder\n    \"\"\"\n    update_data = {\n        \"full_name\": \"Updated Test User\"\n    }\n    \n    response = client.put(\"/api/v1/auth/me\", json=update_data, headers=auth_headers)\n    \n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert data[\"full_name\"] == update_data[\"full_name\"]\n",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcı bilgilerini güncellemeyi test eder"
                },
                {
                    "name": "test_logout",
                    "file": "integration\\test_auth_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_logout(client: TestClient, auth_headers):\n    \"\"\"\n    Logout işlemini test eder\n    \"\"\"\n    # Önce logout yap\n    logout_response = client.post(\"/api/v1/auth/logout\", headers=auth_headers)\n    assert logout_response.status_code == status.HTTP_204_NO_CONTENT\n    \n    # Aynı token ile /me endpoint'ine erişmeyi dene\n    me_response = client.get(\"/api/v1/auth/me\", headers=auth_headers)\n    assert me_response.status_code == status.HTTP_401_UNAUTHORIZED ",
                    "error": null,
                    "type": "other",
                    "description": "Logout işlemini test eder"
                },
                {
                    "name": "test_password_hash_and_verify",
                    "file": "unit\\test_auth_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_password_hash_and_verify():\n    \"\"\"\n    Şifre hashleme ve doğrulama işlevlerini test eder\n    \"\"\"\n    password = \"test_password\"\n    hashed = get_password_hash(password)\n    \n    # Hash farklı olmalı\n    assert hashed != password\n    \n    # Doğrulama başarılı olmalı\n    assert verify_password(password, hashed) == True\n    \n    # Yanlış şifre doğrulanmamalı\n    assert verify_password(\"wrong_password\", hashed) == False\n",
                    "error": null,
                    "type": "other",
                    "description": "Şifre hashleme ve doğrulama işlevlerini test eder"
                },
                {
                    "name": "test_create_user",
                    "file": "unit\\test_auth_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_user(test_db: Session):\n    \"\"\"\n    Kullanıcı oluşturma işlevini test eder\n    \"\"\"\n    user_data = UserCreate(\n        email=\"testcreate@example.com\",\n        password=\"Test1234!\",\n        full_name=\"Test Create User\",\n        date_of_birth=date(2000, 1, 1)\n    )\n    \n    user = create_user(test_db, user_data)\n    \n    # Kullanıcı doğru şekilde oluşturuldu mu?\n    assert user.email == user_data.email\n    assert user.full_name == user_data.full_name\n    assert user.date_of_birth == user_data.date_of_birth\n    # Şifre hashlenmiş olmalı\n    assert user.hashed_password != user_data.password\n    \n    # Veritabanından tekrar çekip kontrol edelim\n    db_user = test_db.query(user.__class__).filter_by(id=user.id).first()\n    assert db_user is not None\n    assert db_user.email == user_data.email\n",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcı oluşturma işlevini test eder"
                },
                {
                    "name": "test_create_duplicate_user_raises_error",
                    "file": "unit\\test_auth_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_duplicate_user_raises_error(test_db: Session):\n    \"\"\"\n    Aynı e-posta ile ikinci bir kullanıcı oluşturmanın hata vermesini test eder\n    \"\"\"\n    user_data = UserCreate(\n        email=\"testduplicate@example.com\",\n        password=\"Test1234!\",\n        full_name=\"Test Duplicate User\",\n        date_of_birth=date(2000, 1, 1)\n    )\n    \n    # İlk kullanıcıyı oluştur\n    create_user(test_db, user_data)\n    \n    # Aynı e-posta ile ikinci bir kullanıcı oluşturmak hata vermeli\n    with pytest.raises(ValueError):\n        create_user(test_db, user_data)\n",
                    "error": null,
                    "type": "other",
                    "description": "Aynı e-posta ile ikinci bir kullanıcı oluşturmanın hata vermesini test eder"
                },
                {
                    "name": "test_authenticate_user",
                    "file": "unit\\test_auth_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_authenticate_user(test_db: Session):\n    \"\"\"\n    Kullanıcı kimlik doğrulama işlevini test eder\n    \"\"\"\n    user_data = UserCreate(\n        email=\"testauth@example.com\",\n        password=\"Test1234!\",\n        full_name=\"Test Auth User\",\n        date_of_birth=date(2000, 1, 1)\n    )\n    \n    # Kullanıcı oluştur\n    create_user(test_db, user_data)\n    \n    # Doğru kimlik bilgileriyle doğrulama\n    authenticated_user = authenticate_user(test_db, user_data.email, user_data.password)\n    assert authenticated_user is not None\n    assert authenticated_user.email == user_data.email\n    \n    # Yanlış şifreyle doğrulama\n    wrong_auth_user = authenticate_user(test_db, user_data.email, \"wrong_password\")\n    assert wrong_auth_user is None\n    \n    # Var olmayan kullanıcıyla doğrulama\n    nonexistent_user = authenticate_user(test_db, \"nonexistent@example.com\", user_data.password)\n    assert nonexistent_user is None\n",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcı kimlik doğrulama işlevini test eder"
                },
                {
                    "name": "test_create_access_token",
                    "file": "unit\\test_auth_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_access_token():\n    \"\"\"\n    JWT oluşturma işlevini test eder\n    \"\"\"\n    data = {\"sub\": \"test@example.com\"}\n    token = create_access_token(data)\n    \n    # Token bir string olmalı\n    assert isinstance(token, str)\n    # Token boş olmamalı\n    assert token\n    # JWT formatını kontrol etmek için noktaları sayalım (header.payload.signature)\n    assert token.count('.') == 2 ",
                    "error": null,
                    "type": "other",
                    "description": "JWT oluşturma işlevini test eder"
                }
            ]
        },
        "user": {
            "name": "Kullanıcı Servisi Testleri",
            "icon": "user",
            "total": 9,
            "passed": 9,
            "failed": 0,
            "skipped": 0,
            "tests": [
                {
                    "name": "test_create_user",
                    "file": "unit\\test_user_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_user(test_db: Session):\n    \"\"\"\n    Kullanıcı oluşturma işlevini test eder\n    \"\"\"\n    # Benzersiz bir e-posta adresi oluştur\n    unique_id = str(uuid.uuid4())\n    email = f\"test_create_user_{unique_id}@example.com\"\n    \n    user_data = UserCreate(\n        email=email,\n        password=\"password123\",\n        full_name=\"Test User\",\n        date_of_birth=date(2000, 1, 1)\n    )\n    \n    user = create_user(test_db, user_data)\n    \n    # Kullanıcı doğru şekilde oluşturuldu mu?\n    assert user.email == user_data.email\n    assert user.full_name == user_data.full_name\n    assert user.date_of_birth == user_data.date_of_birth\n    \n    # Şifre hash'lendi mi?\n    assert user.hashed_password != user_data.password\n    \n    # Kullanıcı aktif mi?\n    assert user.is_active == True\n    \n    # Superuser değil, değil mi?\n    assert user.is_superuser == False\n",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcı oluşturma işlevini test eder"
                },
                {
                    "name": "test_create_user_with_existing_email",
                    "file": "unit\\test_user_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_user_with_existing_email(test_db: Session, test_user: User):\n    \"\"\"\n    Var olan bir e-posta ile kullanıcı oluşturmayı dener ve hatayı doğrular\n    \"\"\"\n    user_data = UserCreate(\n        email=test_user.email,  # Var olan bir e-posta\n        password=\"password123\",\n        full_name=\"Another User\",\n        date_of_birth=date(2000, 1, 1)\n    )\n    \n    with pytest.raises(HTTPException) as excinfo:\n        create_user(test_db, user_data)\n    \n    assert excinfo.value.status_code == 400\n    assert \"Email already registered\" in excinfo.value.detail\n",
                    "error": null,
                    "type": "other",
                    "description": "Var olan bir e-posta ile kullanıcı oluşturmayı dener ve hatayı doğrular"
                },
                {
                    "name": "test_get_user_by_id",
                    "file": "unit\\test_user_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_user_by_id(test_db: Session, test_user: User):\n    \"\"\"\n    ID ile kullanıcı getirme işlevini test eder\n    \"\"\"\n    user = get_user_by_id(test_db, test_user.id)\n    \n    # Doğru kullanıcı getirildi mi?\n    assert user.id == test_user.id\n    assert user.email == test_user.email\n    assert user.full_name == test_user.full_name\n",
                    "error": null,
                    "type": "other",
                    "description": "ID ile kullanıcı getirme işlevini test eder"
                },
                {
                    "name": "test_get_user_by_nonexistent_id",
                    "file": "unit\\test_user_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_user_by_nonexistent_id(test_db: Session):\n    \"\"\"\n    Var olmayan bir ID ile kullanıcı getirmeyi dener ve hatayı doğrular\n    \"\"\"\n    with pytest.raises(HTTPException) as excinfo:\n        get_user_by_id(test_db, 9999)  # Var olmayan ID\n    \n    assert excinfo.value.status_code == 404\n    assert \"not found\" in excinfo.value.detail.lower()\n",
                    "error": null,
                    "type": "other",
                    "description": "Var olmayan bir ID ile kullanıcı getirmeyi dener ve hatayı doğrular"
                },
                {
                    "name": "test_get_user_by_email",
                    "file": "unit\\test_user_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_user_by_email(test_db: Session, test_user: User):\n    \"\"\"\n    E-posta ile kullanıcı getirme işlevini test eder\n    \"\"\"\n    user = get_user_by_email(test_db, test_user.email)\n    \n    # Doğru kullanıcı getirildi mi?\n    assert user is not None\n    assert user.id == test_user.id\n    assert user.email == test_user.email\n",
                    "error": null,
                    "type": "other",
                    "description": "E-posta ile kullanıcı getirme işlevini test eder"
                },
                {
                    "name": "test_get_user_by_nonexistent_email",
                    "file": "unit\\test_user_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_user_by_nonexistent_email(test_db: Session):\n    \"\"\"\n    Var olmayan bir e-posta ile kullanıcı getirmeyi dener\n    \"\"\"\n    user = get_user_by_email(test_db, \"nonexistent@example.com\")\n    \n    # Kullanıcı bulunamadı mı?\n    assert user is None\n",
                    "error": null,
                    "type": "other",
                    "description": "Var olmayan bir e-posta ile kullanıcı getirmeyi dener"
                },
                {
                    "name": "test_update_user",
                    "file": "unit\\test_user_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_update_user(test_db: Session, test_user: User):\n    \"\"\"\n    Kullanıcı güncelleme işlevini test eder\n    \"\"\"\n    # Önce bir kopya oluştur\n    original_hashed_password = test_user.hashed_password\n    \n    update_data = UserUpdate(\n        full_name=\"Updated Test User\",\n        password=\"newpassword123\"\n    )\n    \n    updated_user = update_user(test_db, test_user.id, update_data)\n    \n    # Kullanıcı doğru şekilde güncellendi mi?\n    assert updated_user.id == test_user.id\n    assert updated_user.full_name == update_data.full_name\n    \n    # Şifre güncellendi mi?\n    assert updated_user.hashed_password != original_hashed_password\n    \n    # E-posta ve diğer alanlar değişmedi mi?\n    assert updated_user.email == test_user.email\n    assert updated_user.date_of_birth == test_user.date_of_birth\n",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcı güncelleme işlevini test eder"
                },
                {
                    "name": "test_delete_user",
                    "file": "unit\\test_user_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_delete_user(test_db: Session):\n    \"\"\"\n    Kullanıcı silme işlevini test eder\n    \"\"\"\n    # Önce bir kullanıcı oluştur\n    unique_id = str(uuid.uuid4())\n    user_data = UserCreate(\n        email=f\"test_delete_user_{unique_id}@example.com\",\n        password=\"password123\",\n        full_name=\"User To Delete\",\n        date_of_birth=date(2000, 1, 1)\n    )\n    \n    created_user = create_user(test_db, user_data)\n    user_id = created_user.id\n    \n    # Kullanıcıyı sil\n    delete_user(test_db, user_id)\n    \n    # Kullanıcı silindi mi kontrol et\n    with pytest.raises(HTTPException) as excinfo:\n        get_user_by_id(test_db, user_id)\n    \n    assert excinfo.value.status_code == 404\n",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcı silme işlevini test eder"
                },
                {
                    "name": "test_authenticate_user",
                    "file": "unit\\test_user_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_authenticate_user(test_db: Session):\n    \"\"\"\n    Kullanıcı kimlik doğrulama işlevini test eder\n    \"\"\"\n    # Önce bir kullanıcı oluştur\n    unique_id = str(uuid.uuid4())\n    email = f\"test_auth_user_{unique_id}@example.com\"\n    password = \"password123\"\n    \n    user_data = UserCreate(\n        email=email,\n        password=password,\n        full_name=\"Auth Test User\",\n        date_of_birth=date(2000, 1, 1)\n    )\n    \n    create_user(test_db, user_data)\n    \n    # Doğru kimlik bilgileriyle doğrulama\n    authenticated_user = authenticate_user(test_db, email, password)\n    assert authenticated_user is not None\n    assert authenticated_user.email == email\n    \n    # Yanlış şifre ile doğrulama\n    authenticated_user = authenticate_user(test_db, email, \"wrongpassword\")\n    assert authenticated_user is None\n    \n    # Yanlış e-posta ile doğrulama\n    authenticated_user = authenticate_user(test_db, \"wrong@example.com\", password)\n    assert authenticated_user is None ",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcı kimlik doğrulama işlevini test eder"
                }
            ]
        },
        "game": {
            "name": "Oyun Servisi Testleri",
            "icon": "gamepad",
            "total": 23,
            "passed": 23,
            "failed": 0,
            "skipped": 0,
            "tests": [
                {
                    "name": "test_create_game_route",
                    "file": "integration\\test_game_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_game_route(client: TestClient, auth_headers):\n    \"\"\"\n    Oyun oluşturma endpoint'ini test eder\n    \"\"\"\n    game_data = {\n        \"name\": \"test_route_game\",\n        \"title\": \"Test Route Game\",\n        \"description\": \"Test game creation via API\"\n    }\n    \n    response = client.post(\"/api/v1/games\", json=game_data, headers=auth_headers)\n    \n    assert response.status_code == status.HTTP_201_CREATED\n    data = response.json()\n    assert data[\"name\"] == game_data[\"name\"]\n    # Şifrelenmiş alanları sadece var olup olmadığını kontrol edelim\n    assert \"title\" in data\n    assert \"description\" in data\n    assert \"id\" in data\n    assert \"created_at\" in data\n",
                    "error": null,
                    "type": "other",
                    "description": "Oyun oluşturma endpoint'ini test eder"
                },
                {
                    "name": "test_create_game_unauthorized",
                    "file": "integration\\test_game_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_game_unauthorized(client: TestClient):\n    \"\"\"\n    Kimlik doğrulama olmadan oyun oluşturmayı dener\n    \"\"\"\n    game_data = {\n        \"name\": \"unauthorized_game\",\n        \"title\": \"Unauthorized Game\",\n        \"description\": \"Should not be created\"\n    }\n    \n    response = client.post(\"/api/v1/games\", json=game_data)\n    \n    assert response.status_code == status.HTTP_401_UNAUTHORIZED\n",
                    "error": null,
                    "type": "other",
                    "description": "Kimlik doğrulama olmadan oyun oluşturmayı dener"
                },
                {
                    "name": "test_get_game_by_id_route",
                    "file": "integration\\test_game_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_game_by_id_route(client: TestClient, auth_headers):\n    \"\"\"\n    ID ile oyun getirme endpoint'ini test eder\n    \"\"\"\n    # Önce bir oyun oluştur\n    game_data = {\n        \"name\": \"get_route_game\",\n        \"title\": \"Get Route Game\",\n        \"description\": \"Test getting game by ID via API\"\n    }\n    \n    create_response = client.post(\"/api/v1/games\", json=game_data, headers=auth_headers)\n    assert create_response.status_code == status.HTTP_201_CREATED\n    game_id = create_response.json()[\"id\"]\n    \n    # ID ile oyunu getir\n    get_response = client.get(f\"/api/v1/games/{game_id}\")\n    \n    assert get_response.status_code == status.HTTP_200_OK\n    data = get_response.json()\n    assert data[\"id\"] == game_id\n    assert data[\"name\"] == game_data[\"name\"]\n    # Şifrelenmiş alanları sadece var olup olmadığını kontrol edelim\n    assert \"title\" in data\n    assert \"description\" in data\n",
                    "error": null,
                    "type": "other",
                    "description": "ID ile oyun getirme endpoint'ini test eder"
                },
                {
                    "name": "test_get_nonexistent_game",
                    "file": "integration\\test_game_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_nonexistent_game(client: TestClient):\n    \"\"\"\n    Var olmayan bir ID ile oyun getirmeyi dener\n    \"\"\"\n    response = client.get(\"/api/v1/games/9999\")  # Var olmayan ID\n    \n    assert response.status_code == status.HTTP_404_NOT_FOUND\n    assert \"detail\" in response.json()\n",
                    "error": null,
                    "type": "other",
                    "description": "Var olmayan bir ID ile oyun getirmeyi dener"
                },
                {
                    "name": "test_get_all_games_route",
                    "file": "integration\\test_game_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_all_games_route(client: TestClient, auth_headers):\n    \"\"\"\n    Tüm oyunları getirme endpoint'ini test eder\n    \"\"\"\n    # Önce birkaç oyun oluştur\n    game_data1 = {\n        \"name\": \"all_games_test1\",\n        \"title\": \"All Games Test 1\",\n        \"description\": \"Test game 1 for get all endpoint\"\n    }\n    \n    game_data2 = {\n        \"name\": \"all_games_test2\",\n        \"title\": \"All Games Test 2\",\n        \"description\": \"Test game 2 for get all endpoint\"\n    }\n    \n    client.post(\"/api/v1/games\", json=game_data1, headers=auth_headers)\n    client.post(\"/api/v1/games\", json=game_data2, headers=auth_headers)\n    \n    # Tüm oyunları getir\n    response = client.get(\"/api/v1/games\")\n    \n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert isinstance(data, list)\n    \n    # Oluşturduğumuz oyunlar listede olmalı\n    game_names = [game[\"name\"] for game in data]\n    assert \"all_games_test1\" in game_names\n    assert \"all_games_test2\" in game_names\n",
                    "error": null,
                    "type": "other",
                    "description": "Tüm oyunları getirme endpoint'ini test eder"
                },
                {
                    "name": "test_delete_game_route",
                    "file": "integration\\test_game_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_delete_game_route(client: TestClient, auth_headers):\n    \"\"\"\n    Oyun silme endpoint'ini test eder\n    \"\"\"\n    # Önce bir oyun oluştur\n    game_data = {\n        \"name\": \"delete_route_game\",\n        \"title\": \"Delete Route Game\",\n        \"description\": \"Test game deletion via API\"\n    }\n    \n    create_response = client.post(\"/api/v1/games\", json=game_data, headers=auth_headers)\n    assert create_response.status_code == status.HTTP_201_CREATED\n    game_id = create_response.json()[\"id\"]\n    \n    # Oyunu sil\n    delete_response = client.delete(f\"/api/v1/games/{game_id}\", headers=auth_headers)\n    assert delete_response.status_code == status.HTTP_204_NO_CONTENT\n    \n    # Oyunun silindiğini doğrula\n    get_response = client.get(f\"/api/v1/games/{game_id}\")\n    assert get_response.status_code == status.HTTP_404_NOT_FOUND\n",
                    "error": null,
                    "type": "other",
                    "description": "Oyun silme endpoint'ini test eder"
                },
                {
                    "name": "test_delete_game_unauthorized",
                    "file": "integration\\test_game_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_delete_game_unauthorized(client: TestClient, auth_headers):\n    \"\"\"\n    Kimlik doğrulama olmadan oyun silmeyi dener\n    \"\"\"\n    # Önce bir oyun oluştur\n    game_data = {\n        \"name\": \"unauth_delete_game\",\n        \"title\": \"Unauthorized Delete Game\",\n        \"description\": \"Test unauthorized game deletion\"\n    }\n    \n    create_response = client.post(\"/api/v1/games\", json=game_data, headers=auth_headers)\n    assert create_response.status_code == status.HTTP_201_CREATED\n    game_id = create_response.json()[\"id\"]\n    \n    # Kimlik doğrulama olmadan silmeyi dene\n    delete_response = client.delete(f\"/api/v1/games/{game_id}\")\n    assert delete_response.status_code == status.HTTP_401_UNAUTHORIZED ",
                    "error": null,
                    "type": "other",
                    "description": "Kimlik doğrulama olmadan oyun silmeyi dener"
                },
                {
                    "name": "test_create_game_session_route",
                    "file": "integration\\test_game_session_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_game_session_route(client: TestClient, auth_headers, test_game_id, test_user_id, test_db):\n    \"\"\"\n    Oyun oturumu oluşturma endpoint'ini test eder\n    \"\"\"\n    game_session_data = {\n        \"game_id\": test_game_id,\n        \"user_id\": test_user_id,\n        \"score\": 100,\n        \"success\": True,\n        \"started_at\": datetime.now().isoformat()\n    }\n    \n    response = client.post(\"/api/v1/game_sessions\", json=game_session_data, headers=auth_headers)\n    \n    assert response.status_code == status.HTTP_201_CREATED\n    data = response.json()\n    assert data[\"game_id\"] == game_session_data[\"game_id\"]\n    assert data[\"user_id\"] == game_session_data[\"user_id\"]\n    assert data[\"score\"] == game_session_data[\"score\"]\n    assert data[\"success\"] == game_session_data[\"success\"]\n    assert \"id\" in data\n    assert \"started_at\" in data\n",
                    "error": null,
                    "type": "other",
                    "description": "Oyun oturumu oluşturma endpoint'ini test eder"
                },
                {
                    "name": "test_create_game_session_unauthorized",
                    "file": "integration\\test_game_session_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_game_session_unauthorized(client: TestClient, test_game_id, test_user_id):\n    \"\"\"\n    Kimlik doğrulama olmadan oyun oturumu oluşturmayı dener\n    \"\"\"\n    game_session_data = {\n        \"game_id\": test_game_id,\n        \"user_id\": test_user_id,\n        \"score\": 50,\n        \"success\": False,\n        \"started_at\": datetime.now().isoformat()\n    }\n    \n    response = client.post(\"/api/v1/game_sessions\", json=game_session_data)\n    \n    assert response.status_code == status.HTTP_401_UNAUTHORIZED\n",
                    "error": null,
                    "type": "other",
                    "description": "Kimlik doğrulama olmadan oyun oturumu oluşturmayı dener"
                },
                {
                    "name": "test_get_all_game_sessions_route",
                    "file": "integration\\test_game_session_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_all_game_sessions_route(client: TestClient, auth_headers, test_game_id, test_user_id, test_db):\n    \"\"\"\n    Tüm oyun oturumlarını getirme endpoint'ini test eder\n    \"\"\"\n    # Veritabanına doğrudan oyun oturumları ekleyelim\n    session1 = GameSession(\n        game_id=test_game_id,\n        user_id=test_user_id,\n        score=200,\n        success=True,\n        started_at=datetime.now()\n    )\n    \n    session2 = GameSession(\n        game_id=test_game_id,\n        user_id=test_user_id,\n        score=300,\n        success=True,\n        started_at=datetime.now()\n    )\n    \n    test_db.add(session1)\n    test_db.add(session2)\n    test_db.commit()\n    \n    # Tüm oyun oturumlarını getir\n    response = client.get(\"/api/v1/game_sessions\")\n    \n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert isinstance(data, list)\n    assert len(data) >= 2\n",
                    "error": null,
                    "type": "other",
                    "description": "Tüm oyun oturumlarını getirme endpoint'ini test eder"
                },
                {
                    "name": "test_get_user_game_sessions_route",
                    "file": "integration\\test_game_session_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_user_game_sessions_route(client: TestClient, auth_headers, test_game_id, test_user_id, test_db):\n    \"\"\"\n    Kullanıcının oyun oturumlarını getirme endpoint'ini test eder\n    \"\"\"\n    # Veritabanına doğrudan bir oyun oturumu ekleyelim\n    session = GameSession(\n        game_id=test_game_id,\n        user_id=test_user_id,\n        score=150,\n        success=True,\n        started_at=datetime.now()\n    )\n    \n    test_db.add(session)\n    test_db.commit()\n    \n    # Kullanıcının oyun oturumlarını getir\n    response = client.get(f\"/api/v1/game_sessions/user/{test_user_id}\")\n    \n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert isinstance(data, list)\n    assert len(data) >= 1\n    \n    # Oluşturduğumuz oturum kullanıcının oturumları arasında olmalı\n    user_sessions = [s for s in data if s[\"user_id\"] == test_user_id]\n    assert len(user_sessions) >= 1\n",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcının oyun oturumlarını getirme endpoint'ini test eder"
                },
                {
                    "name": "test_get_game_sessions_by_game_route",
                    "file": "integration\\test_game_session_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_game_sessions_by_game_route(client: TestClient, auth_headers, test_game_id, test_user_id, test_db):\n    \"\"\"\n    Oyuna göre oturumları getirme endpoint'ini test eder\n    \"\"\"\n    # Veritabanına doğrudan bir oyun oturumu ekleyelim\n    session = GameSession(\n        game_id=test_game_id,\n        user_id=test_user_id,\n        score=250,\n        success=True,\n        started_at=datetime.now()\n    )\n    \n    test_db.add(session)\n    test_db.commit()\n    \n    # Oyuna göre oturumları getir\n    response = client.get(f\"/api/v1/game_sessions/game/{test_game_id}\")\n    \n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert isinstance(data, list)\n    \n    # Oluşturduğumuz oturum oyunun oturumları arasında olmalı\n    game_sessions = [s for s in data if s[\"game_id\"] == test_game_id]\n    assert len(game_sessions) >= 1\n",
                    "error": null,
                    "type": "other",
                    "description": "Oyuna göre oturumları getirme endpoint'ini test eder"
                },
                {
                    "name": "test_get_filtered_game_sessions_route",
                    "file": "integration\\test_game_session_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_filtered_game_sessions_route(client: TestClient, auth_headers, test_game_id, test_user_id, test_db):\n    \"\"\"\n    Oyun ID'sine göre filtrelenmiş oturumları getirme endpoint'ini test eder\n    \"\"\"\n    # Veritabanına doğrudan bir oyun oturumu ekleyelim\n    session = GameSession(\n        game_id=test_game_id,\n        user_id=test_user_id,\n        score=300,\n        success=True,\n        started_at=datetime.now()\n    )\n    \n    test_db.add(session)\n    test_db.commit()\n    \n    # Filtrelenmiş oturumları getir\n    response = client.get(f\"/api/v1/game_sessions/filter?game_id={test_game_id}\")\n    \n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert isinstance(data, list)\n    \n    # Tüm oturumlar belirtilen oyuna ait olmalı\n    for s in data:\n        assert s[\"game_id\"] == test_game_id ",
                    "error": null,
                    "type": "other",
                    "description": "Oyun ID'sine göre filtrelenmiş oturumları getirme endpoint'ini test eder"
                },
                {
                    "name": "test_create_game",
                    "file": "unit\\test_game_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_game(test_db: Session, test_user: User):\n    \"\"\"\n    Oyun oluşturma işlevini test eder\n    \"\"\"\n    game_data = GameCreate(\n        name=\"test_game\",\n        title=\"Test Game\",\n        description=\"Test game description\"\n    )\n    \n    game = create_game(test_db, game_data, test_user)\n    \n    # Oyun doğru şekilde oluşturuldu mu?\n    assert game.name == game_data.name\n    # Not: title ve description şifrelenmiş olarak saklanır ve döndürülürken çözülür\n    # Bu nedenle doğrudan eşitliği kontrol edemiyoruz\n    assert isinstance(game.title, str)\n    assert isinstance(game.description, str)\n    \n    # Veritabanından çekip kontrol edelim\n    db_game = get_game_by_id(test_db, game.id)\n    assert db_game is not None\n    assert db_game.name == game_data.name\n    assert isinstance(db_game.title, str)\n    assert isinstance(db_game.description, str)\n",
                    "error": null,
                    "type": "other",
                    "description": "Oyun oluşturma işlevini test eder"
                },
                {
                    "name": "test_get_game_by_id",
                    "file": "unit\\test_game_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_game_by_id(test_db: Session, test_user: User):\n    \"\"\"\n    ID ile oyun getirme işlevini test eder\n    \"\"\"\n    # Önce bir oyun oluştur\n    game_data = GameCreate(\n        name=\"get_game_test\",\n        title=\"Get Game Test\",\n        description=\"Test game retrieval\"\n    )\n    \n    created_game = create_game(test_db, game_data, test_user)\n    \n    # ID ile oyunu getir\n    game = get_game_by_id(test_db, created_game.id)\n    \n    # Doğru oyun getirildi mi?\n    assert game.id == created_game.id\n    assert game.name == game_data.name\n    # Şifrelenmiş/çözülmüş alanlarda tür kontrolü yap\n    assert isinstance(game.title, str)\n    assert isinstance(game.description, str)\n",
                    "error": null,
                    "type": "other",
                    "description": "ID ile oyun getirme işlevini test eder"
                },
                {
                    "name": "test_get_game_by_nonexistent_id",
                    "file": "unit\\test_game_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_game_by_nonexistent_id(test_db: Session):\n    \"\"\"\n    Var olmayan bir ID ile oyun getirmeyi dener ve hatayı doğrular\n    \"\"\"\n    with pytest.raises(HTTPException) as excinfo:\n        get_game_by_id(test_db, 9999)  # Var olmayan ID\n    \n    assert excinfo.value.status_code == 404\n    assert \"not found\" in excinfo.value.detail\n",
                    "error": null,
                    "type": "other",
                    "description": "Var olmayan bir ID ile oyun getirmeyi dener ve hatayı doğrular"
                },
                {
                    "name": "test_get_all_games",
                    "file": "unit\\test_game_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_all_games(test_db: Session, test_user: User):\n    \"\"\"\n    Tüm oyunları getirme işlevini test eder\n    \"\"\"\n    # Birkaç oyun oluştur\n    game_data1 = GameCreate(\n        name=\"game1\",\n        title=\"Game One\",\n        description=\"First test game\"\n    )\n    \n    game_data2 = GameCreate(\n        name=\"game2\",\n        title=\"Game Two\",\n        description=\"Second test game\"\n    )\n    \n    create_game(test_db, game_data1, test_user)\n    create_game(test_db, game_data2, test_user)\n    \n    # Tüm oyunları getir\n    games = get_all_games(test_db)\n    \n    # En az iki oyun olmalı\n    assert len(games) >= 2\n    \n    # Oluşturduğumuz oyunlar listede olmalı (name alanına göre kontrol et)\n    assert any(g.name == \"game1\" for g in games)\n    assert any(g.name == \"game2\" for g in games)\n",
                    "error": null,
                    "type": "other",
                    "description": "Tüm oyunları getirme işlevini test eder"
                },
                {
                    "name": "test_delete_game",
                    "file": "unit\\test_game_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_delete_game(test_db: Session, test_user: User):\n    \"\"\"\n    Oyun silme işlevini test eder\n    \"\"\"\n    # Önce bir oyun oluştur\n    game_data = GameCreate(\n        name=\"delete_game_test\",\n        title=\"Delete Game Test\",\n        description=\"Test game deletion\"\n    )\n    \n    created_game = create_game(test_db, game_data, test_user)\n    game_id = created_game.id\n    \n    # Oyunu sil\n    delete_game(test_db, game_id, test_user)\n    \n    # Oyun silindi mi kontrol et\n    with pytest.raises(HTTPException) as excinfo:\n        get_game_by_id(test_db, game_id)\n    \n    assert excinfo.value.status_code == 404 ",
                    "error": null,
                    "type": "other",
                    "description": "Oyun silme işlevini test eder"
                },
                {
                    "name": "test_create_game_session",
                    "file": "unit\\test_game_session_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_game_session(test_db: Session, test_user: User):\n    \"\"\"\n    Oyun oturumu oluşturma işlevini test eder\n    \"\"\"\n    # Önce bir oyun oluştur\n    game_data = GameCreate(\n        name=\"test_game_session\",\n        title=\"Test Game Session\",\n        description=\"Test game session creation\"\n    )\n    game = create_game(test_db, game_data, test_user)\n    \n    # Oyun oturumu oluştur\n    game_session_data = GameSessionCreate(\n        user_id=test_user.id,\n        game_id=game.id,\n        started_at=datetime.now(),\n        score=0\n    )\n    \n    game_session = create_game_session(test_db, game_session_data)\n    \n    # Oyun oturumu doğru şekilde oluşturuldu mu?\n    assert game_session.user_id == game_session_data.user_id\n    assert game_session.game_id == game_session_data.game_id\n    assert game_session.started_at is not None\n    assert game_session.ended_at is None  # Henüz bitmemiş olmalı\n    assert game_session.score == 0\n    \n    # Veritabanından çekip kontrol edelim\n    db_game_session = get_game_session_by_id(test_db, game_session.id)\n    assert db_game_session is not None\n    assert db_game_session.user_id == game_session_data.user_id\n    assert db_game_session.game_id == game_session_data.game_id\n",
                    "error": null,
                    "type": "other",
                    "description": "Oyun oturumu oluşturma işlevini test eder"
                },
                {
                    "name": "test_get_game_session_by_id",
                    "file": "unit\\test_game_session_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_game_session_by_id(test_db: Session, test_user: User):\n    \"\"\"\n    ID ile oyun oturumu getirme işlevini test eder\n    \"\"\"\n    # Önce bir oyun oluştur\n    game_data = GameCreate(\n        name=\"get_game_session_test\",\n        title=\"Get Game Session Test\",\n        description=\"Test game session retrieval\"\n    )\n    game = create_game(test_db, game_data, test_user)\n    \n    # Oyun oturumu oluştur\n    game_session_data = GameSessionCreate(\n        user_id=test_user.id,\n        game_id=game.id,\n        started_at=datetime.now(),\n        score=100\n    )\n    \n    created_game_session = create_game_session(test_db, game_session_data)\n    \n    # ID ile oyun oturumunu getir\n    game_session = get_game_session_by_id(test_db, created_game_session.id)\n    \n    # Doğru oyun oturumu getirildi mi?\n    assert game_session.id == created_game_session.id\n    assert game_session.user_id == game_session_data.user_id\n    assert game_session.game_id == game_session_data.game_id\n    assert game_session.score == game_session_data.score\n",
                    "error": null,
                    "type": "other",
                    "description": "ID ile oyun oturumu getirme işlevini test eder"
                },
                {
                    "name": "test_get_game_session_by_nonexistent_id",
                    "file": "unit\\test_game_session_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_game_session_by_nonexistent_id(test_db: Session):\n    \"\"\"\n    Var olmayan bir ID ile oyun oturumu getirmeyi dener ve hatayı doğrular\n    \"\"\"\n    with pytest.raises(HTTPException) as excinfo:\n        get_game_session_by_id(test_db, 9999)  # Var olmayan ID\n    \n    assert excinfo.value.status_code == 404\n    assert \"not found\" in excinfo.value.detail.lower()\n",
                    "error": null,
                    "type": "other",
                    "description": "Var olmayan bir ID ile oyun oturumu getirmeyi dener ve hatayı doğrular"
                },
                {
                    "name": "test_end_game_session",
                    "file": "unit\\test_game_session_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_end_game_session(test_db: Session, test_user: User):\n    \"\"\"\n    Oyun oturumunu sonlandırma işlevini test eder\n    \"\"\"\n    # Önce bir oyun oluştur\n    game_data = GameCreate(\n        name=\"end_game_session_test\",\n        title=\"End Game Session Test\",\n        description=\"Test game session ending\"\n    )\n    game = create_game(test_db, game_data, test_user)\n    \n    # Oyun oturumu oluştur\n    game_session_data = GameSessionCreate(\n        user_id=test_user.id,\n        game_id=game.id,\n        started_at=datetime.now() - timedelta(minutes=30),  # 30 dakika önce başlamış\n        score=0\n    )\n    \n    created_game_session = create_game_session(test_db, game_session_data)\n    \n    # Oyun oturumunu sonlandır\n    final_score = 500\n    ended_game_session = end_game_session(test_db, created_game_session.id, final_score)\n    \n    # Oyun oturumu doğru şekilde sonlandırıldı mı?\n    assert ended_game_session.ended_at is not None\n    assert ended_game_session.score == final_score\n    \n    # Veritabanından çekip kontrol edelim\n    db_game_session = get_game_session_by_id(test_db, created_game_session.id)\n    assert db_game_session.ended_at is not None\n    assert db_game_session.score == final_score\n",
                    "error": null,
                    "type": "other",
                    "description": "Oyun oturumunu sonlandırma işlevini test eder"
                },
                {
                    "name": "test_get_user_game_sessions",
                    "file": "unit\\test_game_session_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_user_game_sessions(test_db: Session, test_user: User):\n    \"\"\"\n    Kullanıcının oyun oturumlarını getirme işlevini test eder\n    \"\"\"\n    # Önce kullanıcının oyun oturumlarını temizle\n    test_db.query(GameSession).filter(GameSession.user_id == test_user.id).delete()\n    test_db.commit()\n    \n    # Bir oyun oluştur\n    game_data = GameCreate(\n        name=\"user_game_sessions_test\",\n        title=\"User Game Sessions Test\",\n        description=\"Test user game sessions retrieval\"\n    )\n    game = create_game(test_db, game_data, test_user)\n    \n    # İki farklı oyun oturumu oluştur\n    game_session_data1 = GameSessionCreate(\n        user_id=test_user.id,\n        game_id=game.id,\n        started_at=datetime.now() - timedelta(days=1),\n        score=200\n    )\n    \n    game_session_data2 = GameSessionCreate(\n        user_id=test_user.id,\n        game_id=game.id,\n        started_at=datetime.now() - timedelta(hours=2),\n        score=300\n    )\n    \n    session1 = create_game_session(test_db, game_session_data1)\n    session2 = create_game_session(test_db, game_session_data2)\n    \n    # İlk oturumu sonlandır\n    end_game_session(test_db, session1.id, 200)\n    \n    # Kullanıcının oyun oturumlarını getir\n    user_game_sessions = get_user_game_sessions(test_db, test_user.id)\n    \n    # Kullanıcının en az iki oyun oturumu olmalı\n    assert len(user_game_sessions) >= 2\n    \n    # Oluşturduğumuz oturumlar listede olmalı\n    session_ids = [gs.id for gs in user_game_sessions]\n    assert session1.id in session_ids\n    assert session2.id in session_ids\n    \n    # Aktif ve tamamlanmış oturumlar ayrı olarak test edilebilir\n    active_sessions = [gs for gs in user_game_sessions if gs.ended_at is None]\n    completed_sessions = [gs for gs in user_game_sessions if gs.ended_at is not None]\n    \n    assert len(active_sessions) >= 1\n    assert len(completed_sessions) >= 1 ",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcının oyun oturumlarını getirme işlevini test eder"
                }
            ]
        },
        "avatar": {
            "name": "Avatar Servisi Testleri",
            "icon": "user-circle",
            "total": 18,
            "passed": 18,
            "failed": 0,
            "skipped": 0,
            "tests": [
                {
                    "name": "test_create_avatar_route",
                    "file": "integration\\test_avatar_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_avatar_route(client: TestClient, auth_headers):\n    \"\"\"\n    Avatar oluşturma endpoint'ini test eder\n    \"\"\"\n    avatar_data = {\n        \"name\": \"test_route_avatar\",\n        \"image_url\": \"http://example.com/route_avatar.png\",\n        \"description\": \"Test avatar creation via API\"\n    }\n    \n    response = client.post(\"/api/v1/avatars\", json=avatar_data, headers=auth_headers)\n    \n    assert response.status_code == status.HTTP_201_CREATED\n    data = response.json()\n    assert data[\"name\"] == avatar_data[\"name\"]  # İsim şifrelenmeden dönülür\n    assert data[\"image_url\"] == avatar_data[\"image_url\"]\n    assert data[\"description\"] == avatar_data[\"description\"]  # Açıklama şifrelenmeden dönülür\n    assert \"id\" in data\n    assert \"created_at\" in data\n",
                    "error": null,
                    "type": "other",
                    "description": "Avatar oluşturma endpoint'ini test eder"
                },
                {
                    "name": "test_create_avatar_unauthorized",
                    "file": "integration\\test_avatar_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_avatar_unauthorized(client: TestClient):\n    \"\"\"\n    Kimlik doğrulama olmadan avatar oluşturmayı dener\n    \"\"\"\n    avatar_data = {\n        \"name\": \"unauthorized_avatar\",\n        \"image_url\": \"http://example.com/unauthorized_avatar.png\",\n        \"description\": \"Should not be created\"\n    }\n    \n    response = client.post(\"/api/v1/avatars\", json=avatar_data)\n    \n    assert response.status_code == status.HTTP_401_UNAUTHORIZED\n",
                    "error": null,
                    "type": "other",
                    "description": "Kimlik doğrulama olmadan avatar oluşturmayı dener"
                },
                {
                    "name": "test_get_avatar_by_id_route",
                    "file": "integration\\test_avatar_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_avatar_by_id_route(client: TestClient, auth_headers):\n    \"\"\"\n    ID ile avatar getirme endpoint'ini test eder\n    \"\"\"\n    # Önce bir avatar oluştur\n    avatar_data = {\n        \"name\": \"get_route_avatar\",\n        \"image_url\": \"http://example.com/get_route_avatar.png\",\n        \"description\": \"Test getting avatar by ID via API\"\n    }\n    \n    create_response = client.post(\"/api/v1/avatars\", json=avatar_data, headers=auth_headers)\n    assert create_response.status_code == status.HTTP_201_CREATED\n    avatar_id = create_response.json()[\"id\"]\n    \n    # ID ile avatarı getir\n    get_response = client.get(f\"/api/v1/avatars/{avatar_id}\")\n    \n    assert get_response.status_code == status.HTTP_200_OK\n    data = get_response.json()\n    assert data[\"id\"] == avatar_id\n    assert \"name\" in data\n    assert \"image_url\" in data\n    assert \"description\" in data\n",
                    "error": null,
                    "type": "other",
                    "description": "ID ile avatar getirme endpoint'ini test eder"
                },
                {
                    "name": "test_get_nonexistent_avatar",
                    "file": "integration\\test_avatar_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_nonexistent_avatar(client: TestClient):\n    \"\"\"\n    Var olmayan bir ID ile avatar getirmeyi dener\n    \"\"\"\n    response = client.get(\"/api/v1/avatars/9999\")  # Var olmayan ID\n    \n    assert response.status_code == status.HTTP_404_NOT_FOUND\n    assert \"detail\" in response.json()\n",
                    "error": null,
                    "type": "other",
                    "description": "Var olmayan bir ID ile avatar getirmeyi dener"
                },
                {
                    "name": "test_get_all_avatars_route",
                    "file": "integration\\test_avatar_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_all_avatars_route(client: TestClient, auth_headers):\n    \"\"\"\n    Tüm avatarları getirme endpoint'ini test eder\n    \"\"\"\n    # Önce birkaç avatar oluştur\n    avatar_data1 = {\n        \"name\": \"all_avatars_test1\",\n        \"image_url\": \"http://example.com/all_avatars1.png\",\n        \"description\": \"Test avatar 1 for get all endpoint\"\n    }\n    \n    avatar_data2 = {\n        \"name\": \"all_avatars_test2\",\n        \"image_url\": \"http://example.com/all_avatars2.png\",\n        \"description\": \"Test avatar 2 for get all endpoint\"\n    }\n    \n    client.post(\"/api/v1/avatars\", json=avatar_data1, headers=auth_headers)\n    client.post(\"/api/v1/avatars\", json=avatar_data2, headers=auth_headers)\n    \n    # Tüm avatarları getir\n    response = client.get(\"/api/v1/avatars\")\n    \n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert isinstance(data, list)\n    \n    # Oluşturduğumuz avatarlar listede olmalı (doğrudan değerler yerine varlığını kontrol et)\n    assert len(data) >= 2\n",
                    "error": null,
                    "type": "other",
                    "description": "Tüm avatarları getirme endpoint'ini test eder"
                },
                {
                    "name": "test_delete_avatar_route",
                    "file": "integration\\test_avatar_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_delete_avatar_route(client: TestClient, auth_headers):\n    \"\"\"\n    Avatar silme endpoint'ini test eder\n    \"\"\"\n    # Önce bir avatar oluştur\n    avatar_data = {\n        \"name\": \"delete_route_avatar\",\n        \"image_url\": \"http://example.com/delete_route_avatar.png\",\n        \"description\": \"Test avatar deletion via API\"\n    }\n    \n    create_response = client.post(\"/api/v1/avatars\", json=avatar_data, headers=auth_headers)\n    assert create_response.status_code == status.HTTP_201_CREATED\n    avatar_id = create_response.json()[\"id\"]\n    \n    # Avatarı sil\n    delete_response = client.delete(f\"/api/v1/avatars/{avatar_id}\", headers=auth_headers)\n    assert delete_response.status_code == status.HTTP_204_NO_CONTENT\n    \n    # Avatarın silindiğini doğrula\n    get_response = client.get(f\"/api/v1/avatars/{avatar_id}\")\n    assert get_response.status_code == status.HTTP_404_NOT_FOUND\n",
                    "error": null,
                    "type": "other",
                    "description": "Avatar silme endpoint'ini test eder"
                },
                {
                    "name": "test_delete_avatar_unauthorized",
                    "file": "integration\\test_avatar_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_delete_avatar_unauthorized(client: TestClient, auth_headers):\n    \"\"\"\n    Kimlik doğrulama olmadan avatar silmeyi dener\n    \"\"\"\n    # Önce bir avatar oluştur\n    avatar_data = {\n        \"name\": \"unauth_delete_avatar\",\n        \"image_url\": \"http://example.com/unauth_delete_avatar.png\",\n        \"description\": \"Test unauthorized avatar deletion\"\n    }\n    \n    create_response = client.post(\"/api/v1/avatars\", json=avatar_data, headers=auth_headers)\n    assert create_response.status_code == status.HTTP_201_CREATED\n    avatar_id = create_response.json()[\"id\"]\n    \n    # Kimlik doğrulama olmadan silmeyi dene\n    delete_response = client.delete(f\"/api/v1/avatars/{avatar_id}\")\n    assert delete_response.status_code == status.HTTP_401_UNAUTHORIZED ",
                    "error": null,
                    "type": "other",
                    "description": "Kimlik doğrulama olmadan avatar silmeyi dener"
                },
                {
                    "name": "test_create_avatar",
                    "file": "unit\\test_avatar_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_avatar(test_db: Session, test_user: User):\n    \"\"\"\n    Avatar oluşturma işlevini test eder\n    \"\"\"\n    avatar_data = AvatarCreate(\n        name=\"test_avatar\",\n        image_url=\"http://example.com/avatar.png\",\n        description=\"Test avatar description\"\n    )\n    \n    avatar = create_avatar(test_db, avatar_data, test_user.id)\n    \n    # Avatar doğru şekilde oluşturuldu mu?\n    assert avatar.name == avatar_data.name\n    assert avatar.image_url == str(avatar_data.image_url)\n    assert avatar.description == avatar_data.description\n    assert avatar.creator_id == test_user.id\n    \n    # Veritabanından çekip kontrol edelim\n    db_avatar = get_avatar_by_id(test_db, avatar.id)\n    assert db_avatar is not None\n    assert db_avatar.name == avatar_data.name\n    assert db_avatar.image_url == str(avatar_data.image_url)\n    assert db_avatar.description == avatar_data.description\n",
                    "error": null,
                    "type": "other",
                    "description": "Avatar oluşturma işlevini test eder"
                },
                {
                    "name": "test_get_avatar_by_id",
                    "file": "unit\\test_avatar_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_avatar_by_id(test_db: Session, test_user: User):\n    \"\"\"\n    ID ile avatar getirme işlevini test eder\n    \"\"\"\n    # Önce bir avatar oluştur\n    avatar_data = AvatarCreate(\n        name=\"get_avatar_test\",\n        image_url=\"http://example.com/get_avatar.png\",\n        description=\"Test avatar retrieval\"\n    )\n    \n    created_avatar = create_avatar(test_db, avatar_data, test_user.id)\n    \n    # ID ile avatarı getir\n    avatar = get_avatar_by_id(test_db, created_avatar.id)\n    \n    # Doğru avatar getirildi mi?\n    assert avatar.id == created_avatar.id\n    assert avatar.name == avatar_data.name\n    assert avatar.image_url == str(avatar_data.image_url)\n    assert avatar.description == avatar_data.description\n",
                    "error": null,
                    "type": "other",
                    "description": "ID ile avatar getirme işlevini test eder"
                },
                {
                    "name": "test_get_avatar_by_nonexistent_id",
                    "file": "unit\\test_avatar_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_avatar_by_nonexistent_id(test_db: Session):\n    \"\"\"\n    Var olmayan bir ID ile avatar getirmeyi dener ve hatayı doğrular\n    \"\"\"\n    with pytest.raises(HTTPException) as excinfo:\n        get_avatar_by_id(test_db, 9999)  # Var olmayan ID\n    \n    assert excinfo.value.status_code == 404\n    assert \"not found\" in excinfo.value.detail.lower()\n",
                    "error": null,
                    "type": "other",
                    "description": "Var olmayan bir ID ile avatar getirmeyi dener ve hatayı doğrular"
                },
                {
                    "name": "test_delete_avatar",
                    "file": "unit\\test_avatar_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_delete_avatar(test_db: Session, test_user: User):\n    \"\"\"\n    Avatar silme işlevini test eder\n    \"\"\"\n    # Önce bir avatar oluştur\n    avatar_data = AvatarCreate(\n        name=\"delete_avatar_test\",\n        image_url=\"http://example.com/delete_avatar.png\",\n        description=\"Test avatar deletion\"\n    )\n    \n    created_avatar = create_avatar(test_db, avatar_data, test_user.id)\n    \n    # Avatarı sil\n    delete_avatar(test_db, created_avatar.id, test_user)\n    \n    # Avatar silindi mi kontrol et\n    with pytest.raises(HTTPException) as excinfo:\n        get_avatar_by_id(test_db, created_avatar.id)\n    \n    assert excinfo.value.status_code == 404\n",
                    "error": null,
                    "type": "other",
                    "description": "Avatar silme işlevini test eder"
                },
                {
                    "name": "test_get_all_avatars",
                    "file": "unit\\test_avatar_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_all_avatars(test_db: Session, test_user: User):\n    \"\"\"\n    Tüm avatarları getirme işlevini test eder\n    \"\"\"\n    # Önce avatarları temizle\n    test_db.query(Avatar).delete()\n    test_db.commit()\n    \n    # Birkaç avatar oluştur\n    avatar_data1 = AvatarCreate(\n        name=\"avatar1\",\n        image_url=\"http://example.com/avatar1.png\",\n        description=\"First test avatar\"\n    )\n    \n    avatar_data2 = AvatarCreate(\n        name=\"avatar2\",\n        image_url=\"http://example.com/avatar2.png\",\n        description=\"Second test avatar\"\n    )\n    \n    create_avatar(test_db, avatar_data1, test_user.id)\n    create_avatar(test_db, avatar_data2, test_user.id)\n    \n    # Tüm avatarları getir\n    avatars = get_all_avatars(test_db)\n    \n    # En az iki avatar olmalı\n    assert len(avatars) >= 2\n    \n    # Oluşturduğumuz avatarlar listede olmalı (name alanına göre kontrol et)\n    assert any(a.name == \"avatar1\" for a in avatars)\n    assert any(a.name == \"avatar2\" for a in avatars) ",
                    "error": null,
                    "type": "other",
                    "description": "Tüm avatarları getirme işlevini test eder"
                },
                {
                    "name": "test_create_user_avatar",
                    "file": "unit\\test_user_avatar_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_user_avatar(test_db: Session, test_user: User):\n    \"\"\"\n    Kullanıcı avatar oluşturma işlevini test eder\n    \"\"\"\n    # Önce bir avatar oluştur\n    avatar_data = AvatarCreate(\n        name=\"test_user_avatar\",\n        image_url=\"http://example.com/avatar.png\",\n        description=\"Test avatar description\"\n    )\n    avatar = create_avatar(test_db, avatar_data, test_user.id)\n    \n    # Kullanıcı avatar oluştur\n    user_avatar_data = UserAvatarCreate(\n        user_id=test_user.id,\n        avatar_id=avatar.id,\n        is_active=True\n    )\n    \n    user_avatar = create_user_avatar(test_db, user_avatar_data)\n    \n    # Kullanıcı avatar doğru şekilde oluşturuldu mu?\n    assert user_avatar.user_id == user_avatar_data.user_id\n    assert user_avatar.avatar_id == user_avatar_data.avatar_id\n    assert user_avatar.is_active == user_avatar_data.is_active\n    \n    # Veritabanından çekip kontrol edelim\n    db_user_avatar = get_user_avatar_by_id(test_db, user_avatar.id)\n    assert db_user_avatar is not None\n    assert db_user_avatar.user_id == user_avatar_data.user_id\n    assert db_user_avatar.avatar_id == user_avatar_data.avatar_id\n",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcı avatar oluşturma işlevini test eder"
                },
                {
                    "name": "test_get_user_avatar_by_id",
                    "file": "unit\\test_user_avatar_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_user_avatar_by_id(test_db: Session, test_user: User):\n    \"\"\"\n    ID ile kullanıcı avatar getirme işlevini test eder\n    \"\"\"\n    # Önce bir avatar oluştur\n    avatar_data = AvatarCreate(\n        name=\"get_user_avatar_test\",\n        image_url=\"http://example.com/get_avatar.png\",\n        description=\"Test user avatar retrieval\"\n    )\n    avatar = create_avatar(test_db, avatar_data, test_user.id)\n    \n    # Kullanıcı avatar oluştur\n    user_avatar_data = UserAvatarCreate(\n        user_id=test_user.id,\n        avatar_id=avatar.id,\n        is_active=True\n    )\n    \n    created_user_avatar = create_user_avatar(test_db, user_avatar_data)\n    \n    # ID ile kullanıcı avatarı getir\n    user_avatar = get_user_avatar_by_id(test_db, created_user_avatar.id)\n    \n    # Doğru kullanıcı avatar getirildi mi?\n    assert user_avatar.id == created_user_avatar.id\n    assert user_avatar.user_id == user_avatar_data.user_id\n    assert user_avatar.avatar_id == user_avatar_data.avatar_id\n    assert user_avatar.is_active == user_avatar_data.is_active\n",
                    "error": null,
                    "type": "other",
                    "description": "ID ile kullanıcı avatar getirme işlevini test eder"
                },
                {
                    "name": "test_get_user_avatar_by_nonexistent_id",
                    "file": "unit\\test_user_avatar_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_user_avatar_by_nonexistent_id(test_db: Session):\n    \"\"\"\n    Var olmayan bir ID ile kullanıcı avatar getirmeyi dener ve hatayı doğrular\n    \"\"\"\n    with pytest.raises(HTTPException) as excinfo:\n        get_user_avatar_by_id(test_db, 9999)  # Var olmayan ID\n    \n    assert excinfo.value.status_code == 404\n    assert \"not found\" in excinfo.value.detail.lower()\n",
                    "error": null,
                    "type": "other",
                    "description": "Var olmayan bir ID ile kullanıcı avatar getirmeyi dener ve hatayı doğrular"
                },
                {
                    "name": "test_get_user_avatars_by_user_id",
                    "file": "unit\\test_user_avatar_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_user_avatars_by_user_id(test_db: Session, test_user: User):\n    \"\"\"\n    Kullanıcı ID'sine göre kullanıcı avatarlarını getirme işlevini test eder\n    \"\"\"\n    # Yeni bir test kullanıcısı oluştur\n    test_user2 = create_user(\n        test_db,\n        UserCreate(\n            email=\"test2@example.com\",\n            password=\"password123\",\n            full_name=\"Test User 2\",\n            date_of_birth=date(2000, 1, 1)\n        )\n    )\n    \n    # Önce kullanıcı avatarlarını temizle\n    test_db.query(UserAvatar).filter(UserAvatar.user_id == test_user.id).delete()\n    test_db.query(UserAvatar).filter(UserAvatar.user_id == test_user2.id).delete()\n    test_db.commit()\n    \n    # İki farklı avatar oluştur\n    avatar_data1 = AvatarCreate(\n        name=\"user_avatar1\",\n        image_url=\"http://example.com/avatar1.png\",\n        description=\"First test user avatar\"\n    )\n    \n    avatar_data2 = AvatarCreate(\n        name=\"user_avatar2\",\n        image_url=\"http://example.com/avatar2.png\",\n        description=\"Second test user avatar\"\n    )\n    \n    avatar1 = create_avatar(test_db, avatar_data1, test_user.id)\n    avatar2 = create_avatar(test_db, avatar_data2, test_user.id)\n    \n    # İki farklı kullanıcı için avatar oluştur\n    user_avatar_data1 = UserAvatarCreate(\n        user_id=test_user.id,\n        avatar_id=avatar1.id,\n        is_active=True\n    )\n    \n    user_avatar_data2 = UserAvatarCreate(\n        user_id=test_user2.id,\n        avatar_id=avatar2.id,\n        is_active=False\n    )\n    \n    create_user_avatar(test_db, user_avatar_data1)\n    create_user_avatar(test_db, user_avatar_data2)\n    \n    # Birinci kullanıcının avatarlarını getir\n    user_avatars = get_user_avatars_by_user_id(test_db, test_user.id)\n    \n    # Kullanıcının bir avatarı olmalı\n    assert len(user_avatars) == 1\n    \n    # Oluşturduğumuz avatar listede olmalı\n    avatar_ids = [ua.avatar_id for ua in user_avatars]\n    assert avatar1.id in avatar_ids\n    assert avatar2.id not in avatar_ids  # Bu başka kullanıcıya ait olmalı\n",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcı ID'sine göre kullanıcı avatarlarını getirme işlevini test eder"
                },
                {
                    "name": "test_update_user_avatar",
                    "file": "unit\\test_user_avatar_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_update_user_avatar(test_db: Session, test_user: User):\n    \"\"\"\n    Kullanıcı avatar güncelleme işlevini test eder\n    \"\"\"\n    # Önce bir avatar oluştur\n    avatar_data = AvatarCreate(\n        name=\"update_user_avatar_test\",\n        image_url=\"http://example.com/update_avatar.png\",\n        description=\"Test user avatar update\"\n    )\n    avatar = create_avatar(test_db, avatar_data, test_user.id)\n    \n    # Kullanıcı avatar oluştur\n    user_avatar_data = UserAvatarCreate(\n        user_id=test_user.id,\n        avatar_id=avatar.id,\n        is_active=False\n    )\n    \n    created_user_avatar = create_user_avatar(test_db, user_avatar_data)\n    \n    # Kullanıcı avatarı güncelle\n    update_data = UserAvatarUpdate(is_active=True)\n    updated_user_avatar = update_user_avatar(test_db, created_user_avatar.id, update_data)\n    \n    # Güncelleme başarılı mı?\n    assert updated_user_avatar.is_active == True\n    \n    # Veritabanından çekip kontrol edelim\n    db_user_avatar = get_user_avatar_by_id(test_db, created_user_avatar.id)\n    assert db_user_avatar.is_active == True\n",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcı avatar güncelleme işlevini test eder"
                },
                {
                    "name": "test_delete_user_avatar",
                    "file": "unit\\test_user_avatar_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_delete_user_avatar(test_db: Session, test_user: User):\n    \"\"\"\n    Kullanıcı avatar silme işlevini test eder\n    \"\"\"\n    # Önce bir avatar oluştur\n    avatar_data = AvatarCreate(\n        name=\"delete_user_avatar_test\",\n        image_url=\"http://example.com/delete_avatar.png\",\n        description=\"Test user avatar deletion\"\n    )\n    avatar = create_avatar(test_db, avatar_data, test_user.id)\n    \n    # Kullanıcı avatar oluştur\n    user_avatar_data = UserAvatarCreate(\n        user_id=test_user.id,\n        avatar_id=avatar.id,\n        is_active=True\n    )\n    \n    created_user_avatar = create_user_avatar(test_db, user_avatar_data)\n    user_avatar_id = created_user_avatar.id\n    \n    # Kullanıcı avatarı sil\n    delete_user_avatar(test_db, user_avatar_id)\n    \n    # Silme başarılı mı?\n    with pytest.raises(HTTPException) as excinfo:\n        get_user_avatar_by_id(test_db, user_avatar_id)\n    \n    assert excinfo.value.status_code == 404 ",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcı avatar silme işlevini test eder"
                }
            ]
        },
        "badge": {
            "name": "Rozet Servisi Testleri",
            "icon": "award",
            "total": 17,
            "passed": 17,
            "failed": 0,
            "skipped": 0,
            "tests": [
                {
                    "name": "test_create_badge_route",
                    "file": "integration\\test_badge_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_badge_route(client: TestClient, auth_headers):\n    \"\"\"\n    Rozet oluşturma endpoint'ini test eder\n    \"\"\"\n    badge_data = {\n        \"name\": \"test_route_badge\",\n        \"icon_url\": \"http://example.com/route_badge.png\",\n        \"description\": \"Test badge creation via API\",\n        \"criteria\": \"Earn 100 points\"\n    }\n    \n    response = client.post(\"/api/v1/badges\", json=badge_data, headers=auth_headers)\n    \n    assert response.status_code == status.HTTP_201_CREATED\n    data = response.json()\n    assert data[\"name\"] == badge_data[\"name\"]\n    assert data[\"icon_url\"] == badge_data[\"icon_url\"]\n    assert data[\"description\"] == badge_data[\"description\"]\n    assert \"id\" in data\n",
                    "error": null,
                    "type": "other",
                    "description": "Rozet oluşturma endpoint'ini test eder"
                },
                {
                    "name": "test_create_badge_unauthorized",
                    "file": "integration\\test_badge_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_badge_unauthorized(client: TestClient):\n    \"\"\"\n    Kimlik doğrulama olmadan rozet oluşturmayı dener\n    \"\"\"\n    badge_data = {\n        \"name\": \"unauthorized_badge\",\n        \"icon_url\": \"http://example.com/unauthorized_badge.png\",\n        \"description\": \"Should not be created\",\n        \"criteria\": \"Should not be created\"\n    }\n    \n    response = client.post(\"/api/v1/badges\", json=badge_data)\n    \n    assert response.status_code == status.HTTP_401_UNAUTHORIZED\n",
                    "error": null,
                    "type": "other",
                    "description": "Kimlik doğrulama olmadan rozet oluşturmayı dener"
                },
                {
                    "name": "test_get_all_badges_route",
                    "file": "integration\\test_badge_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_all_badges_route(client: TestClient, auth_headers):\n    \"\"\"\n    Tüm rozetleri getirme endpoint'ini test eder\n    \"\"\"\n    # Önce birkaç rozet oluştur\n    badge_data1 = {\n        \"name\": \"all_badges_test1\",\n        \"icon_url\": \"http://example.com/all_badges1.png\",\n        \"description\": \"Test badge 1 for get all endpoint\",\n        \"criteria\": \"Earn 50 points\"\n    }\n    \n    badge_data2 = {\n        \"name\": \"all_badges_test2\",\n        \"icon_url\": \"http://example.com/all_badges2.png\",\n        \"description\": \"Test badge 2 for get all endpoint\",\n        \"criteria\": \"Complete 5 tasks\"\n    }\n    \n    client.post(\"/api/v1/badges\", json=badge_data1, headers=auth_headers)\n    client.post(\"/api/v1/badges\", json=badge_data2, headers=auth_headers)\n    \n    # Tüm rozetleri getir\n    response = client.get(\"/api/v1/badges\")\n    \n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    assert isinstance(data, list)\n    \n    # Oluşturduğumuz rozetler listede olmalı\n    badge_names = [badge[\"name\"] for badge in data]\n    assert \"all_badges_test1\" in badge_names\n    assert \"all_badges_test2\" in badge_names\n",
                    "error": null,
                    "type": "other",
                    "description": "Tüm rozetleri getirme endpoint'ini test eder"
                },
                {
                    "name": "test_update_badge_route",
                    "file": "integration\\test_badge_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_update_badge_route(client: TestClient, auth_headers):\n    \"\"\"\n    Rozet güncelleme endpoint'ini test eder\n    \"\"\"\n    # Önce bir rozet oluştur\n    badge_data = {\n        \"name\": \"update_route_badge\",\n        \"icon_url\": \"http://example.com/update_route_badge.png\",\n        \"description\": \"Test badge update via API\",\n        \"criteria\": \"Original criteria\"\n    }\n    \n    create_response = client.post(\"/api/v1/badges\", json=badge_data, headers=auth_headers)\n    assert create_response.status_code == status.HTTP_201_CREATED\n    badge_id = create_response.json()[\"id\"]\n    \n    # Rozeti güncelle\n    update_data = {\n        \"description\": \"Updated description\",\n        \"criteria\": \"Updated criteria\"\n    }\n    \n    update_response = client.put(f\"/api/v1/badges/{badge_id}\", json=update_data, headers=auth_headers)\n    assert update_response.status_code == status.HTTP_200_OK\n    \n    updated_badge = update_response.json()\n    assert updated_badge[\"id\"] == badge_id\n    assert updated_badge[\"name\"] == badge_data[\"name\"]  # Değişmemeli\n    assert updated_badge[\"description\"] == update_data[\"description\"]  # Güncellenmeli\n    assert updated_badge[\"criteria\"] == update_data[\"criteria\"]  # Güncellenmeli\n",
                    "error": null,
                    "type": "other",
                    "description": "Rozet güncelleme endpoint'ini test eder"
                },
                {
                    "name": "test_delete_badge_route",
                    "file": "integration\\test_badge_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_delete_badge_route(client: TestClient, auth_headers):\n    \"\"\"\n    Rozet silme endpoint'ini test eder\n    \"\"\"\n    # Önce bir rozet oluştur\n    badge_data = {\n        \"name\": \"delete_route_badge\",\n        \"icon_url\": \"http://example.com/delete_route_badge.png\",\n        \"description\": \"Test badge deletion via API\",\n        \"criteria\": \"Test criteria\"\n    }\n    \n    create_response = client.post(\"/api/v1/badges\", json=badge_data, headers=auth_headers)\n    assert create_response.status_code == status.HTTP_201_CREATED\n    badge_id = create_response.json()[\"id\"]\n    \n    # Rozeti sil\n    delete_response = client.delete(f\"/api/v1/badges/{badge_id}\", headers=auth_headers)\n    assert delete_response.status_code == status.HTTP_204_NO_CONTENT\n    \n    # Rozet silindi mi kontrol et\n    get_response = client.get(\"/api/v1/badges\")\n    badge_ids = [badge[\"id\"] for badge in get_response.json()]\n    assert badge_id not in badge_ids\n",
                    "error": null,
                    "type": "other",
                    "description": "Rozet silme endpoint'ini test eder"
                },
                {
                    "name": "test_delete_badge_unauthorized",
                    "file": "integration\\test_badge_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_delete_badge_unauthorized(client: TestClient, auth_headers):\n    \"\"\"\n    Kimlik doğrulama olmadan rozet silmeyi dener\n    \"\"\"\n    # Önce bir rozet oluştur\n    badge_data = {\n        \"name\": \"unauth_delete_badge\",\n        \"icon_url\": \"http://example.com/unauth_delete_badge.png\",\n        \"description\": \"Test unauthorized badge deletion\",\n        \"criteria\": \"Test criteria\"\n    }\n    \n    create_response = client.post(\"/api/v1/badges\", json=badge_data, headers=auth_headers)\n    assert create_response.status_code == status.HTTP_201_CREATED\n    badge_id = create_response.json()[\"id\"]\n    \n    # Kimlik doğrulama olmadan silmeyi dene\n    delete_response = client.delete(f\"/api/v1/badges/{badge_id}\")\n    assert delete_response.status_code == status.HTTP_401_UNAUTHORIZED ",
                    "error": null,
                    "type": "other",
                    "description": "Kimlik doğrulama olmadan rozet silmeyi dener"
                },
                {
                    "name": "test_assign_badge_to_user_route",
                    "file": "integration\\test_user_badge_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_assign_badge_to_user_route(client: TestClient, auth_headers, test_user_id):\n    \"\"\"\n    Kullanıcıya rozet atama endpoint'ini test eder\n    \"\"\"\n    # Önce bir rozet oluştur\n    badge_data = {\n        \"name\": \"test_user_badge_route\",\n        \"icon_url\": \"http://example.com/user_badge_route.png\",\n        \"description\": \"Test user badge assignment via API\",\n        \"criteria\": \"Earn 100 points\"\n    }\n    \n    badge_response = client.post(\"/api/v1/badges\", json=badge_data, headers=auth_headers)\n    assert badge_response.status_code == status.HTTP_201_CREATED\n    badge_id = badge_response.json()[\"id\"]\n    \n    # Kullanıcıya rozet ata\n    user_badge_data = {\n        \"badge_id\": badge_id\n    }\n    \n    response = client.post(\"/api/v1/user_badges\", json=user_badge_data, headers=auth_headers)\n    \n    assert response.status_code == status.HTTP_201_CREATED\n    data = response.json()\n    assert data[\"badge_id\"] == badge_id\n    assert data[\"user_id\"] == test_user_id\n    assert \"id\" in data\n",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcıya rozet atama endpoint'ini test eder"
                },
                {
                    "name": "test_assign_badge_to_user_unauthorized",
                    "file": "integration\\test_user_badge_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_assign_badge_to_user_unauthorized(client: TestClient):\n    \"\"\"\n    Kimlik doğrulama olmadan kullanıcıya rozet atamayı dener\n    \"\"\"\n    user_badge_data = {\n        \"badge_id\": 1  # Herhangi bir rozet ID'si\n    }\n    \n    response = client.post(\"/api/v1/user_badges\", json=user_badge_data)\n    \n    assert response.status_code == status.HTTP_401_UNAUTHORIZED\n",
                    "error": null,
                    "type": "other",
                    "description": "Kimlik doğrulama olmadan kullanıcıya rozet atamayı dener"
                },
                {
                    "name": "test_get_user_badges_route",
                    "file": "integration\\test_user_badge_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_user_badges_route(client: TestClient, auth_headers, test_user_id):\n    \"\"\"\n    Kullanıcının rozetlerini getirme endpoint'ini test eder\n    \"\"\"\n    # Önce bir rozet oluştur ve kullanıcıya ata\n    badge_data = {\n        \"name\": \"get_user_badges_test\",\n        \"icon_url\": \"http://example.com/get_user_badges.png\",\n        \"description\": \"Test getting user badges via API\",\n        \"criteria\": \"Complete 10 tasks\"\n    }\n    \n    badge_response = client.post(\"/api/v1/badges\", json=badge_data, headers=auth_headers)\n    assert badge_response.status_code == status.HTTP_201_CREATED\n    badge_id = badge_response.json()[\"id\"]\n    \n    # Kullanıcıya rozet ata\n    user_badge_data = {\n        \"badge_id\": badge_id\n    }\n    \n    client.post(\"/api/v1/user_badges\", json=user_badge_data, headers=auth_headers)\n    \n    # Kullanıcının rozetlerini getir\n    response = client.get(f\"/api/v1/user_badges/{test_user_id}\")\n    \n    assert response.status_code == status.HTTP_200_OK\n    data = response.json()\n    \n    # En az bir rozet olmalı\n    assert len(data) >= 1\n    \n    # Atadığımız rozet kullanıcının rozetleri arasında olmalı\n    badge_ids = [user_badge[\"badge_id\"] for user_badge in data]\n    assert badge_id in badge_ids\n",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcının rozetlerini getirme endpoint'ini test eder"
                },
                {
                    "name": "test_get_nonexistent_user_badges",
                    "file": "integration\\test_user_badge_routes.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_nonexistent_user_badges(client: TestClient):\n    \"\"\"\n    Var olmayan bir kullanıcının rozetlerini getirmeyi dener\n    \"\"\"\n    response = client.get(\"/api/v1/user_badges/9999\")  # Var olmayan kullanıcı ID'si\n    \n    # Kullanıcı olmadığında boş liste döndürebilir veya hata döndürebilir\n    if response.status_code == status.HTTP_200_OK:\n        assert response.json() == []\n    else:\n        assert response.status_code == status.HTTP_404_NOT_FOUND ",
                    "error": null,
                    "type": "other",
                    "description": "Var olmayan bir kullanıcının rozetlerini getirmeyi dener"
                },
                {
                    "name": "test_create_badge",
                    "file": "unit\\test_badge_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_badge(test_db: Session, test_user: User):\n    \"\"\"\n    Rozet oluşturma işlevini test eder\n    \"\"\"\n    badge_data = BadgeCreate(\n        name=\"test_badge\",\n        icon_url=\"http://example.com/badge.png\",\n        description=\"Test badge description\",\n        criteria=\"Test criteria for earning this badge\"\n    )\n    \n    badge = create_badge(test_db, badge_data, test_user)\n    \n    # Rozet doğru şekilde oluşturuldu mu?\n    assert badge.name == badge_data.name\n    assert badge.icon_url == str(badge_data.icon_url) if badge_data.icon_url else None\n    assert badge.description == badge_data.description\n    assert badge.criteria == badge_data.criteria\n    assert badge.creator_id == test_user.id\n    \n    # Veritabanından çekip kontrol edelim\n    db_badge = get_badge_by_id(test_db, badge.id)\n    assert db_badge is not None\n    assert db_badge.name == badge_data.name\n    assert db_badge.icon_url == str(badge_data.icon_url) if badge_data.icon_url else None\n    assert db_badge.description == badge_data.description\n",
                    "error": null,
                    "type": "other",
                    "description": "Rozet oluşturma işlevini test eder"
                },
                {
                    "name": "test_get_badge_by_id",
                    "file": "unit\\test_badge_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_badge_by_id(test_db: Session, test_user: User):\n    \"\"\"\n    ID ile rozet getirme işlevini test eder\n    \"\"\"\n    # Önce bir rozet oluştur\n    badge_data = BadgeCreate(\n        name=\"get_badge_test\",\n        icon_url=\"http://example.com/get_badge.png\",\n        description=\"Test badge retrieval\",\n        criteria=\"Test criteria for this badge\"\n    )\n    \n    created_badge = create_badge(test_db, badge_data, test_user)\n    \n    # ID ile rozeti getir\n    badge = get_badge_by_id(test_db, created_badge.id)\n    \n    # Doğru rozet getirildi mi?\n    assert badge.id == created_badge.id\n    assert badge.name == badge_data.name\n    assert badge.icon_url == str(badge_data.icon_url) if badge_data.icon_url else None\n    assert badge.description == badge_data.description\n    assert badge.criteria == badge_data.criteria\n",
                    "error": null,
                    "type": "other",
                    "description": "ID ile rozet getirme işlevini test eder"
                },
                {
                    "name": "test_get_badge_by_nonexistent_id",
                    "file": "unit\\test_badge_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_badge_by_nonexistent_id(test_db: Session):\n    \"\"\"\n    Var olmayan bir ID ile rozet getirmeyi dener ve hatayı doğrular\n    \"\"\"\n    with pytest.raises(HTTPException) as excinfo:\n        get_badge_by_id(test_db, 9999)  # Var olmayan ID\n    \n    assert excinfo.value.status_code == 404\n    assert \"not found\" in excinfo.value.detail.lower()\n",
                    "error": null,
                    "type": "other",
                    "description": "Var olmayan bir ID ile rozet getirmeyi dener ve hatayı doğrular"
                },
                {
                    "name": "test_update_badge",
                    "file": "unit\\test_badge_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_update_badge(test_db: Session, test_user: User):\n    \"\"\"\n    Rozet güncelleme işlevini test eder\n    \"\"\"\n    # Önce bir rozet oluştur\n    badge_data = BadgeCreate(\n        name=\"update_badge_test\",\n        icon_url=\"http://example.com/update_badge.png\",\n        description=\"Original description\",\n        criteria=\"Original criteria\"\n    )\n    \n    created_badge = create_badge(test_db, badge_data, test_user)\n    \n    # Rozeti güncelle\n    update_data = BadgeUpdate(\n        description=\"Updated description\",\n        criteria=\"Updated criteria\"\n    )\n    \n    updated_badge = update_badge(test_db, created_badge.id, update_data, test_user)\n    \n    # Rozet doğru şekilde güncellendi mi?\n    assert updated_badge.name == badge_data.name  # Değişmemeli\n    assert updated_badge.icon_url == str(badge_data.icon_url) if badge_data.icon_url else None  # Değişmemeli\n    assert updated_badge.description == update_data.description  # Güncellenmiş olmalı\n    assert updated_badge.criteria == update_data.criteria  # Güncellenmiş olmalı\n    \n    # Veritabanından çekip kontrol edelim\n    db_badge = get_badge_by_id(test_db, created_badge.id)\n    assert db_badge.description == update_data.description\n    assert db_badge.criteria == update_data.criteria\n",
                    "error": null,
                    "type": "other",
                    "description": "Rozet güncelleme işlevini test eder"
                },
                {
                    "name": "test_delete_badge",
                    "file": "unit\\test_badge_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_delete_badge(test_db: Session, test_user: User):\n    \"\"\"\n    Rozet silme işlevini test eder\n    \"\"\"\n    # Önce bir rozet oluştur\n    badge_data = BadgeCreate(\n        name=\"delete_badge_test\",\n        icon_url=\"http://example.com/delete_badge.png\",\n        description=\"Test badge deletion\",\n        criteria=\"Test criteria for delete badge\"\n    )\n    \n    created_badge = create_badge(test_db, badge_data, test_user)\n    badge_id = created_badge.id\n    \n    # Rozeti sil\n    delete_badge(test_db, badge_id, test_user)\n    \n    # Rozet silindi mi kontrol et\n    with pytest.raises(HTTPException) as excinfo:\n        get_badge_by_id(test_db, badge_id)\n    \n    assert excinfo.value.status_code == 404\n",
                    "error": null,
                    "type": "other",
                    "description": "Rozet silme işlevini test eder"
                },
                {
                    "name": "test_assign_badge_to_user",
                    "file": "unit\\test_badge_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_assign_badge_to_user(test_db: Session, test_user: User):\n    \"\"\"\n    Kullanıcıya rozet atama işlevini test eder\n    \"\"\"\n    # Önce bir rozet oluştur\n    badge_data = BadgeCreate(\n        name=\"assign_badge_test\",\n        icon_url=\"http://example.com/assign_badge.png\",\n        description=\"Test badge assignment\",\n        criteria=\"Test criteria for assign badge\"\n    )\n    \n    badge = create_badge(test_db, badge_data, test_user)\n    \n    # Rozeti kullanıcıya ata\n    user_badge = assign_badge_to_user(test_db, badge.id, test_user.id)\n    \n    # Rozet doğru şekilde atandı mı?\n    assert user_badge.user_id == test_user.id\n    assert user_badge.badge_id == badge.id\n    \n    # Kullanıcının rozetlerini getirip kontrol edelim\n    user_badges = get_user_badges(test_db, test_user.id)\n    assert any(ub.badge_id == badge.id for ub in user_badges)\n",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcıya rozet atama işlevini test eder"
                },
                {
                    "name": "test_get_user_badges",
                    "file": "unit\\test_badge_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_user_badges(test_db: Session, test_user: User):\n    \"\"\"\n    Kullanıcının rozetlerini getirme işlevini test eder\n    \"\"\"\n    # Önce kullanıcının rozetlerini temizle\n    test_db.query(UserBadge).filter(UserBadge.user_id == test_user.id).delete()\n    test_db.commit()\n    \n    # İki farklı rozet oluştur\n    badge_data1 = BadgeCreate(\n        name=\"user_badge1\",\n        icon_url=\"http://example.com/user_badge1.png\",\n        description=\"First test user badge\",\n        criteria=\"First test criteria\"\n    )\n    \n    badge_data2 = BadgeCreate(\n        name=\"user_badge2\",\n        icon_url=\"http://example.com/user_badge2.png\",\n        description=\"Second test user badge\",\n        criteria=\"Second test criteria\"\n    )\n    \n    badge1 = create_badge(test_db, badge_data1, test_user)\n    badge2 = create_badge(test_db, badge_data2, test_user)\n    \n    # Rozetleri kullanıcıya ata\n    assign_badge_to_user(test_db, badge1.id, test_user.id)\n    assign_badge_to_user(test_db, badge2.id, test_user.id)\n    \n    # Kullanıcının rozetlerini getir\n    user_badges = get_user_badges(test_db, test_user.id)\n    \n    # Kullanıcının en az iki rozeti olmalı\n    assert len(user_badges) >= 2\n    \n    # Oluşturduğumuz rozetler listede olmalı\n    badge_ids = [ub.badge_id for ub in user_badges]\n    assert badge1.id in badge_ids\n    assert badge2.id in badge_ids ",
                    "error": null,
                    "type": "other",
                    "description": "Kullanıcının rozetlerini getirme işlevini test eder"
                }
            ]
        },
        "flight": {
            "name": "Uçuş Servisi Testleri",
            "icon": "plane",
            "total": 2,
            "passed": 2,
            "failed": 0,
            "skipped": 0,
            "tests": [
                {
                    "name": "test_create_flight",
                    "file": "unit\\test_flight_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_create_flight(test_db: Session, test_user: User):\n    \"\"\"\n    Uçuş rotası oluşturma işlevini test eder\n    \"\"\"\n    flight_data = FlightCreate(\n        title=\"Test Uçuş Rotası\",\n        description=\"Bu bir test uçuş rotası açıklamasıdır\"\n    )\n    \n    # Orijinal verileri sakla\n    original_title = flight_data.title\n    original_description = flight_data.description\n    \n    # Uçuş oluştur\n    flight = create_flight(test_db, flight_data)\n    \n    # Uçuş doğru şekilde oluşturuldu mu?\n    assert flight.id is not None\n    # Not: create_flight verileri şifreli olarak döndürür, o yüzden karşılaştırmak için deşifre edilmeli\n    assert encryption_service.decrypt(flight.title) == original_title\n    if flight.description:\n        assert encryption_service.decrypt(flight.description) == original_description\n    \n    # Veritabanından tüm uçuşları çekip kontrol edelim\n    db_flights = get_all_flights(test_db)\n    assert len(db_flights) >= 1\n    \n    # Oluşturduğumuz uçuş listede olmalı\n    created_flight = next((f for f in db_flights if f.id == flight.id), None)\n    assert created_flight is not None\n    assert created_flight.title == original_title  # get_all_flights verileri deşifre eder\n",
                    "error": null,
                    "type": "other",
                    "description": "Uçuş rotası oluşturma işlevini test eder"
                },
                {
                    "name": "test_get_all_flights",
                    "file": "unit\\test_flight_service.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_get_all_flights(test_db: Session):\n    \"\"\"\n    Tüm uçuşları getirme işlevini test eder\n    \"\"\"\n    # Önce veritabanını temizle\n    test_db.query(Flight).delete()\n    test_db.commit()\n    \n    # Birkaç uçuş oluştur\n    flight_data1 = FlightCreate(\n        title=\"Birinci Test Uçuşu\",\n        description=\"Birinci test uçuşu açıklaması\"\n    )\n    \n    flight_data2 = FlightCreate(\n        title=\"İkinci Test Uçuşu\",\n        description=\"İkinci test uçuşu açıklaması\"\n    )\n    \n    create_flight(test_db, flight_data1)\n    create_flight(test_db, flight_data2)\n    \n    # Tüm uçuşları getir\n    flights = get_all_flights(test_db)\n    \n    # En az iki uçuş olmalı\n    assert len(flights) >= 2\n    \n    # Oluşturduğumuz uçuşlar listede olmalı (başlık alanına göre kontrol et)\n    assert any(f.title == \"Birinci Test Uçuşu\" for f in flights)\n    assert any(f.title == \"İkinci Test Uçuşu\" for f in flights) ",
                    "error": null,
                    "type": "other",
                    "description": "Tüm uçuşları getirme işlevini test eder"
                }
            ]
        },
        "failures": {
            "name": "Test Hata Senaryoları",
            "icon": "bug",
            "total": 4,
            "passed": 4,
            "failed": 0,
            "skipped": 0,
            "tests": [
                {
                    "name": "test_intentional_failure",
                    "file": "unit\\test_failures.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_intentional_failure():\n    \"\"\"Bu test, gösterge panosunda başarısız test görünümünü göstermek için kasıtlı olarak başarısız olur.\"\"\"\n    assert False, \"Bu test kasıtlı olarak başarısız oldu\"\n",
                    "error": null,
                    "type": "other",
                    "description": "Bu test, gösterge panosunda başarısız test görünümünü göstermek için kasıtlı olarak başarısız olur."
                },
                {
                    "name": "test_expected_vs_actual",
                    "file": "unit\\test_failures.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_expected_vs_actual():\n    \"\"\"Beklenen ve gerçek değerlerin karşılaştırılmasını gösteren başarısız test.\"\"\"\n    expected = \"beklenen değer\"\n    actual = \"gerçek değer\"\n    assert expected == actual, f\"Beklenen: {expected}, Gerçek: {actual}\"\n",
                    "error": null,
                    "type": "other",
                    "description": "Beklenen ve gerçek değerlerin karşılaştırılmasını gösteren başarısız test."
                },
                {
                    "name": "test_exception_raised",
                    "file": "unit\\test_failures.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_exception_raised():\n    \"\"\"Beklenmeyen bir istisnanın fırlatıldığı başarısız test.\"\"\"\n    def function_that_raises():\n        raise ValueError(\"Bu bir hata mesajıdır\")\n    \n    function_that_raises()\n",
                    "error": null,
                    "type": "other",
                    "description": "Beklenmeyen bir istisnanın fırlatıldığı başarısız test."
                },
                {
                    "name": "test_skipped",
                    "file": "unit\\test_failures.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_skipped():\n    \"\"\"Bu test atlanacak ve raporlarda ayrı bir kategori olarak gösterilecek.\"\"\"\n    assert True ",
                    "error": null,
                    "type": "other",
                    "description": "Bu test atlanacak ve raporlarda ayrı bir kategori olarak gösterilecek."
                }
            ]
        },
        "db": {
            "name": "Veritabanı Model Testleri",
            "icon": "database",
            "total": 3,
            "passed": 3,
            "failed": 0,
            "skipped": 0,
            "tests": [
                {
                    "name": "test_user_model_create",
                    "file": "db\\test_user_model.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_user_model_create(test_db: Session):\n    \"\"\"\n    User modelinin oluşturulmasını test eder\n    \"\"\"\n    # Yeni bir kullanıcı oluştur\n    user = User(\n        email=\"testuser@example.com\",\n        full_name=\"Test User\",\n        date_of_birth=date(2000, 1, 1),\n        hashed_password=\"hashed_password_string\",\n        is_active=True,\n        is_superuser=False\n    )\n    \n    test_db.add(user)\n    test_db.commit()\n    test_db.refresh(user)\n    \n    # ID atanmış olmalı\n    assert user.id is not None\n    \n    # Veritabanından kullanıcıyı çekip kontrol et\n    db_user = test_db.query(User).filter(User.id == user.id).first()\n    assert db_user is not None\n    assert db_user.email == \"testuser@example.com\"\n    assert db_user.full_name == \"Test User\"\n    assert db_user.date_of_birth == date(2000, 1, 1)\n    assert db_user.hashed_password == \"hashed_password_string\"\n    assert db_user.is_active is True\n    assert db_user.is_superuser is False\n    \n    # created_at ve updated_at alanları doldurulmuş olmalı\n    assert isinstance(db_user.created_at, datetime)\n    assert isinstance(db_user.updated_at, datetime)\n",
                    "error": null,
                    "type": "other",
                    "description": "User modelinin oluşturulmasını test eder"
                },
                {
                    "name": "test_user_model_update",
                    "file": "db\\test_user_model.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_user_model_update(test_db: Session):\n    \"\"\"\n    User modelinin güncellenmesini test eder\n    \"\"\"\n    # Önce bir kullanıcı oluştur\n    user = User(\n        email=\"updateuser@example.com\",\n        full_name=\"Update Test User\",\n        date_of_birth=date(2000, 1, 1),\n        hashed_password=\"original_password_hash\",\n        is_active=True,\n        is_superuser=False\n    )\n    \n    test_db.add(user)\n    test_db.commit()\n    test_db.refresh(user)\n    \n    # Güncelleme öncesi zaman\n    original_updated_at = user.updated_at\n    \n    # Kullanıcıyı güncelle\n    user.full_name = \"Updated Name\"\n    user.hashed_password = \"new_password_hash\"\n    \n    test_db.add(user)\n    test_db.commit()\n    test_db.refresh(user)\n    \n    # Değişiklikleri kontrol et\n    assert user.full_name == \"Updated Name\"\n    assert user.hashed_password == \"new_password_hash\"\n    \n    # updated_at alanı güncellenmiş olmalı (SQLite test DB kullandığımızdan burada çalışmayabilir)\n    # assert user.updated_at > original_updated_at\n",
                    "error": null,
                    "type": "other",
                    "description": "User modelinin güncellenmesini test eder"
                },
                {
                    "name": "test_user_model_delete",
                    "file": "db\\test_user_model.py",
                    "status": "passed",
                    "duration": 0.0,
                    "code": "def test_user_model_delete(test_db: Session):\n    \"\"\"\n    User modelinin silinmesini test eder\n    \"\"\"\n    # Önce bir kullanıcı oluştur\n    user = User(\n        email=\"deleteuser@example.com\",\n        full_name=\"Delete Test User\",\n        date_of_birth=date(2000, 1, 1),\n        hashed_password=\"password_hash\",\n        is_active=True,\n        is_superuser=False\n    )\n    \n    test_db.add(user)\n    test_db.commit()\n    test_db.refresh(user)\n    \n    user_id = user.id\n    \n    # Kullanıcıyı sil\n    test_db.delete(user)\n    test_db.commit()\n    \n    # Kullanıcının artık veritabanında olmaması gerekiyor\n    deleted_user = test_db.query(User).filter(User.id == user_id).first()\n    assert deleted_user is None ",
                    "error": null,
                    "type": "other",
                    "description": "User modelinin silinmesini test eder"
                }
            ]
        }
    }
}